// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhyGen.Insfrastructure.Persistence.DbContexts;

#nullable disable

namespace PhyGen.Insfrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250608030016_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhyGen.Domain.Entities.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectCurriculumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCurriculumId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ChapterUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterUnits");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("ContentFlows");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentFlowId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContentFlowId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LearningOutcome")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ContentFlowId1");

                    b.ToTable("ContentItems");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentItemExamCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContentItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExamCategoryId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentItemId");

                    b.HasIndex("ExamCategoryId1");

                    b.ToTable("ContentItemExamCategories");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.EmailOtpManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Otptext")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Otptype")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EmailOtpManagers");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("MatrixId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectCurriculumId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MatrixId");

                    b.HasIndex("SubjectCurriculumId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ExamCategories");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamCategoryChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExamCategoryId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ExamCategoryId1");

                    b.ToTable("ExamCategoryChapters");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Matrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ExamCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExamCategoryId1")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamCategoryId1");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Matrices");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.MatrixContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContentItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatrixId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContentItemId");

                    b.HasIndex("MatrixId");

                    b.ToTable("MatrixContentItems");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer1")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Answer2")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Answer3")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Answer4")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Answer5")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Answer6")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("ChapterUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("CorrectAnswer")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChapterUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.QuestionMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionMedias");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.SubjectCurriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurriculumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectCurriculums");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<int>("Coin")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<bool>("isConfirm")
                        .HasColumnType("boolean");

                    b.Property<string>("photoURL")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.SubjectCurriculum", "SubjectCurriculum")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectCurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectCurriculum");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ChapterUnit", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Chapter", "Chapter")
                        .WithMany("ChapterUnits")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentFlow", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentItem", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ContentFlow", "ContentFlow")
                        .WithMany("ContentItems")
                        .HasForeignKey("ContentFlowId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentFlow");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentItemExamCategory", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ContentItem", "ContentItem")
                        .WithMany("ContentItemExamCategories")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.ExamCategory", "ExamCategory")
                        .WithMany()
                        .HasForeignKey("ExamCategoryId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentItem");

                    b.Navigation("ExamCategory");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Exam", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ExamCategory", "Category")
                        .WithMany("Exams")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.Matrix", "Matrix")
                        .WithMany()
                        .HasForeignKey("MatrixId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.SubjectCurriculum", "SubjectCurriculum")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectCurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.User", null)
                        .WithMany("Exams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Matrix");

                    b.Navigation("SubjectCurriculum");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamCategoryChapter", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.ExamCategory", "ExamCategory")
                        .WithMany("ExamCategoryChapters")
                        .HasForeignKey("ExamCategoryId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("ExamCategory");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamQuestion", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Matrix", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ExamCategory", "ExamCategory")
                        .WithMany("Matrices")
                        .HasForeignKey("ExamCategoryId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.Subject", "Subject")
                        .WithMany("Matrices")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.User", null)
                        .WithMany("Matrices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ExamCategory");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.MatrixContentItem", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ContentItem", "ContentItem")
                        .WithMany()
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.Matrix", "Matrix")
                        .WithMany("MatrixContentItems")
                        .HasForeignKey("MatrixId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentItem");

                    b.Navigation("Matrix");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Question", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.ChapterUnit", "ChapterUnit")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.User", null)
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChapterUnit");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.QuestionMedia", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Question", "Question")
                        .WithMany("QuestionMedias")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.SubjectCurriculum", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectCurriculums")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PhyGen.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterUnits");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ChapterUnit", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentFlow", b =>
                {
                    b.Navigation("ContentItems");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ContentItem", b =>
                {
                    b.Navigation("ContentItemExamCategories");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.ExamCategory", b =>
                {
                    b.Navigation("ExamCategoryChapters");

                    b.Navigation("Exams");

                    b.Navigation("Matrices");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Matrix", b =>
                {
                    b.Navigation("MatrixContentItems");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("QuestionMedias");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Matrices");

                    b.Navigation("SubjectCurriculums");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.SubjectCurriculum", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("PhyGen.Domain.Entities.User", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Matrices");

                    b.Navigation("Notifications");

                    b.Navigation("Questions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
